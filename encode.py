import base64 as b64_module
import os
def bin_to_base32_header(input_file, output_file, variable_name="payload"):
    try:
        with open(input_file, 'rb') as f:
            binary_data = f.read()
    except FileNotFoundError:
        print(f"error: input file '{input_file}' not found")
        return False
    except Exception as e:
        print(f"error reading input file: {e}")
        return False
    base32_data = b64_module.b32encode(binary_data)
    data_size = len(binary_data)
    encoded_size = len(base32_data)
    formatted_data = ''
    bytes_per_line = 16
    for i in range(0, encoded_size, bytes_per_line):
        line_bytes = base32_data[i:i+bytes_per_line]
        hex_values = [f'0x{byte:02x}' for byte in line_bytes]
        formatted_data += '    ' + ', '.join(hex_values) + ',\n'
    formatted_data = formatted_data.rstrip(',\n') + '\n'
    try:
        with open(output_file, 'w') as f:
            f.write(f"#ifndef {variable_name.upper()}_H\n")
            f.write(f"#define {variable_name.upper()}_H\n\n")
            f.write(f"// auto generated from {os.path.basename(input_file)}\n")
            f.write(f"// og size: {data_size} bytes\n")
            f.write(f"// encoded size: {encoded_size} bytes\n\n")
            f.write(f"const unsigned int {variable_name}_size = {encoded_size};\n")
            f.write(f"const unsigned char {variable_name}[] = {{\n")
            f.write(formatted_data)
            f.write("};\n\n")
            f.write(f"#endif // {variable_name.upper()}_H\n")
        print(f"success: {output_file}")
        print(f"og size: {data_size} bytes")
        print(f"encoded size: {encoded_size} bytes")
        return True
    except Exception as e:
        print(f"error writing output file: {e}")
        return False
if __name__ == "__main__":
    input_filename = "loader.bin"  # default output name generated by donut
    output_filename = "payload.h"
    success = bin_to_base32_header(input_filename, output_filename, "payload")
    if success:
        print("conversion completed successfully")
    else:
        print("conversion failed")